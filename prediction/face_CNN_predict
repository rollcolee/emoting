# 표정 : 이미지 학습모델(CNN)을 비디오로 테스트

import cv2
import numpy as np
import tensorflow as tf
from tensorflow import keras
import json
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from google.colab.patches import cv2_imshow

# 이미지 데이터 전처리 함수 (모델 입력 형태에 맞춤)
def preprocess_face(face_image, target_size=(96, 96)):
    """얼굴 영역을 전처리하고 모델 입력 형태로 변환하는 함수."""
    resized_face = cv2.resize(face_image, target_size)
    normalized_face = resized_face / 255.0
    normalized_face = np.expand_dims(normalized_face, axis=0) # 배치 차원 추가
    return normalized_face

# 예측 함수
def predict_expression(face_image,label_mapping):
    processed_data = preprocess_face(face_image)
    predictions = model.predict(processed_data)
    predicted_label = np.argmax(predictions)
    print(f"예측 레이블: {predicted_label}")
    expression = label_mapping.get(predicted_label, "unknown")
    print(f"expression : {expression}")
    return expression # 문자열 레이블 반환

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml') # Haar Cascade

def detect_faces(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY) #haar cascade 를 사용한다면 gray scale 로 변경해야 합니다.
    faces = face_cascade.detectMultiScale(gray, 1.3, 5) #haar cascade 를 사용한다면 gray scale 이미지를 넣어야 합니다.
    return faces

def draw_faces(image, faces):
    for (x, y, w, h) in faces:
        cv2.rectangle(image, (x-25, y-25), (x+w+25, y+h+25), (0, 255, 0), 2)

# Keras 모델 로드
try:
    model = keras.models.load_model("/content/CNN_face_expression_model.keras")
    print("모델 로드 성공")
    model.summary()  # 모델 구조 출력 (확인용)

    # 클래스 수 확인
    num_classes = model.output_shape[-1]
    print(f"클래스 수: {num_classes}")
except Exception as e:
    print(f"모델 로드 오류: {e}")
    exit()

# 라벨 인코딩 정보 로드
label_mapping = {}
try:
    with open("/content/CNN_face_label_encoder.json", "r") as f:
        label_mapping = json.load(f)
    #숫자키를 문자키로 변경
    #label_mapping = {int(k): v for k, v in label_mapping.items()} #에러가 발생하는 코드입니다.
    label_mapping = {value: key for key, value in label_mapping.items()}
    # 클래스 레이블 출력
    print(f"클래스 레이블: {label_mapping}")
except Exception as e:
    print(f"라벨 인코딩 로드 오류: {e}")
    exit()


# 비디오 처리 루프 (얼굴 영역이 이미 잘려 들어온다고 가정)
cap = cv2.VideoCapture("/content/5822490-sd_240_426_25fps.mp4")

frame_skip = 100
frame_count = 0
predicted_label_count = {}
previous_label = None

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_count += 1
    if frame_count % frame_skip != 0:
        continue

    faces = detect_faces(frame)
    draw_faces(frame, faces)
    face_image = frame
    if len(faces) > 0:
        for (x, y, w, h) in faces:
            face_image = frame[y-25:y+h+25, x-25:x+w+25]
    else:
      print("얼굴 없음")

    # cv2_imshow(face_image) # 얼굴인식 잘되는지 확인 위해 얼굴만 나오게

    try:
        expression = predict_expression(face_image, label_mapping)

        label = expression
        if label != previous_label:
            if label in predicted_label_count:
                predicted_label_count[label] += 1
            else:
                predicted_label_count[label] = 1
            previous_label = label

        # 예측 텍스트를 프레임에 추가
        cv2.putText(frame, expression, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

    except Exception as e:
        print(f"예측 오류: {e}")

    # # 현재까지 누적된 예측 결과 표시
    # result_text = "Predictions: " + str(predicted_label_count)
    # cv2.putText(frame, result_text, (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2, cv2.LINE_AA)

    cv2_imshow(frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

print("예측 텍스트별 최종 누적 횟수:")
df = pd.DataFrame(list(predicted_label_count.items()), columns=['label', 'count'])
df = df.sort_values(by='count', ascending=False).reset_index(drop=True)
print(df)
